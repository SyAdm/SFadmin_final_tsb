# playbooks/install_elk_docker.yml
---
- name: Check Docker installation and deploy ELK stack
  hosts: "{{ target_hosts }}"
  become: true
  gather_facts: true
  vars:
    docker_users:
      - "{{ ansible_user }}"

  tasks:
    - name: Check if Docker is installed
      command: which docker
      register: docker_check
      ignore_errors: yes
      changed_when: false

    - name: Set Docker installation fact
      set_fact:
        docker_installed: "{{ docker_check.rc == 0 }}"

    - name: Show Docker status
      debug:
        msg: "Docker installed: {{ docker_installed }}"

    - name: Install Docker prerequisites
      block:
        - name: Install Docker prerequisites
          apt:
            name:
              - apt-transport-https
              - ca-certificates
              - curl
              - gnupg
              - lsb-release
            state: present
            update_cache: yes

        - name: Add Docker GPG key
          apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
            state: present

        - name: Add Docker repository
          apt_repository:
            repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
            state: present
            filename: docker

        - name: Install Docker
          apt:
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin
            state: present
            update_cache: yes

        - name: Ensure Docker service is running
          systemd:
            name: docker
            state: started
            enabled: yes

        - name: Add current user to docker group
          user:
            name: "{{ ansible_user }}"
            groups: docker
            append: yes

        - name: Verify Docker installation
          command: docker --version
          register: docker_version
          changed_when: false

        - name: Show Docker version
          debug:
            var: docker_version.stdout
      when: not docker_installed

    - name: Create ELK directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
      loop:
        - /opt/elk
        - /opt/elk/elasticsearch/data
        - /opt/elk/elasticsearch/logs
        - /opt/elk/kibana/data
        - /opt/elk/logstash/config
        - /opt/elk/logstash/pipeline

    - name: Create Elasticsearch configuration
      copy:
        content: |
          cluster.name: "docker-cluster"
          network.host: 0.0.0.0
          discovery.type: single-node
          xpack.security.enabled: false
          xpack.license.self_generated.type: basic
        dest: /opt/elk/elasticsearch/elasticsearch.yml
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

    - name: Create Kibana configuration
      copy:
        content: |
          server.name: kibana
          server.host: "0.0.0.0"
          elasticsearch.hosts: [ "http://elasticsearch:9200" ]
          monitoring.ui.container.elasticsearch.enabled: true
          xpack.security.enabled: false
        dest: /opt/elk/kibana/kibana.yml
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

    - name: Create Logstash configuration
      copy:
        content: |
          input {
            beats {
              port => 5044
            }
            tcp {
              port => 5000
              codec => json
            }
          }
          filter {
            # Add your filters here
          }
          output {
            elasticsearch {
              hosts => ["http://elasticsearch:9200"]
              index => "logstash-%{+YYYY.MM.dd}"
            }
            stdout {
              codec => rubydebug
            }
          }
        dest: /opt/elk/logstash/pipeline/logstash.conf
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

    - name: Create Docker Compose file for ELK
      copy:
        content: |
          version: '3.8'

          services:
            elasticsearch:
              image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
              container_name: elasticsearch
              environment:
                - discovery.type=single-node
                - xpack.security.enabled=false
                - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
              volumes:
                - ./elasticsearch/data:/usr/share/elasticsearch/data
                - ./elasticsearch/logs:/usr/share/elasticsearch/logs
                - ./elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
              ports:
                - "9200:9200"
                - "9300:9300"
              networks:
                - elk
              restart: unless-stopped

            kibana:
              image: docker.elastic.co/kibana/kibana:8.11.0
              container_name: kibana
              environment:
                - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
              volumes:
                - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
                - ./kibana/data:/usr/share/kibana/data
              ports:
                - "5601:5601"
              networks:
                - elk
              depends_on:
                - elasticsearch
              restart: unless-stopped

            logstash:
              image: docker.elastic.co/logstash/logstash:8.11.0
              container_name: logstash
              environment:
                - "LS_JAVA_OPTS=-Xms256m -Xmx256m"
              volumes:
                - ./logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
              ports:
                - "5044:5044"
                - "5000:5000"
              networks:
                - elk
              depends_on:
                - elasticsearch
              restart: unless-stopped

          networks:
            elk:
              driver: bridge
        dest: /opt/elk/docker-compose.yml
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

    - name: Pull ELK images
      community.docker.docker_image:
        name: "{{ item }}"
        source: pull
      loop:
        - docker.elastic.co/elasticsearch/elasticsearch:8.11.0
        - docker.elastic.co/kibana/kibana:8.11.0
        - docker.elastic.co/logstash/logstash:8.11.0

    - name: Start ELK stack with Docker Compose
      community.docker.docker_compose_v2:
        project_src: /opt/elk
        state: present
        restarted: yes

    - name: Wait for ELK services to be ready
      wait_for:
        port: "{{ item.port }}"
        host: "{{ item.host }}"
        delay: 10
        timeout: 120
      loop:
        - { port: 9200, host: "localhost" }
        - { port: 5601, host: "localhost" }

    - name: Check Elasticsearch health
      uri:
        url: http://localhost:9200/
        method: GET
      register: es_health

    - name: Show Elasticsearch status
      debug:
        var: es_health.status

    - name: Check Kibana status
      uri:
        url: http://localhost:5601/api/status
        method: GET
      register: kibana_status
      ignore_errors: yes

- name: üéØ ELK DOCKER DEPLOYMENT SUMMARY
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Show deployment report
      debug:
        msg: |
          
          ============================================
          üê≥ ELK STACK IN DOCKER - DEPLOYMENT COMPLETE
          ============================================
          
          üéØ Target: {{ target_hosts }}
          üñ•Ô∏è  Server: {{ groups[target_hosts][0] }}
          
          üì¶ Deployed Services (Docker):
          ‚Ä¢ ‚úÖ Elasticsearch 8.11.0 - port 9200
          ‚Ä¢ ‚úÖ Kibana 8.11.0 - port 5601  
          ‚Ä¢ ‚úÖ Logstash 8.11.0 - ports 5044, 5000
          
          üîó Access URLs:
          ‚Ä¢ Elasticsearch: http://{{ groups[target_hosts][0] }}:9200
          ‚Ä¢ Kibana UI: http://{{ groups[target_hosts][0] }}:5601
          
          üìÅ Installation Directory: /opt/elk
          
          üõ†Ô∏è Management Commands:
          # Start/stop ELK
          cd /opt/elk && docker compose up -d
          cd /opt/elk && docker compose down
          
          # View status
          cd /opt/elk && docker compose ps
          
          # View logs
          cd /opt/elk && docker compose logs -f
          
          ‚ö° Quick Tests:
          curl http://{{ groups[target_hosts][0] }}:9200
          curl -I http://{{ groups[target_hosts][0] }}:5601
          
          ansible {{ target_hosts }} -m shell -a "cd /opt/elk && docker compose ps" -b
